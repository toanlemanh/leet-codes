class Solution {
   
   
  public void rotate(int[] nums, int k) {
        // if (k==0) return;
        // int i = nums.length - 1;
        // int temp = nums [i];
        // while ( i > 0 ){
        //     nums [i] = nums[i-1];
        //     i--;
        // }
        // nums[i] = temp; 
        // rotate(nums,k-1);

//This is the first way:  O (n)
    //     k = k % nums.length; // VD length = 5 => k = 2 or k = 7 => the same pattern arra
    //     reverse (nums, 0, nums.length - 1);
    //     reverse (nums,0, k-1);
    //     reverse (nums,k, nums.length - 1);
    // }
    // public void reverse (int [] nums, int start, int end){
    //     while ( start < end ){
    //         int temp  = nums[end];
    //         nums[end] = nums[start];
    //         nums[start] = temp;
    //         start++;
    //         end--;
    //     }
    
 //This is the second way:  O (n)
    k = k % nums.length;
    ArrayList<Integer> list = new ArrayList<>();
    for (int i = nums.length - k; i < nums.length; i++){
        list.add( nums[i]);
    }
    for (int i = 0; i < nums.length - k; i++){
        list.add (nums[i]);
    }

    for (int i = 0; i < nums.length; i++)
       nums[i] = list.get(i);

    }
}
